/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: src/protobuf/blog.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export class SafeBlog extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: string;
        Slug?: string;
        CreatedAt?: dependency_1.google.protobuf.Timestamp;
        UpdatedAt?: dependency_1.google.protobuf.Timestamp;
        PublishedAt?: dependency_1.google.protobuf.Timestamp;
        Title?: string;
        Summary?: string;
        Content?: string;
        CoverURL?: string;
        Prev?: string;
        Next?: string;
        AuthorID?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("Slug" in data && data.Slug != undefined) {
                this.Slug = data.Slug;
            }
            if ("CreatedAt" in data && data.CreatedAt != undefined) {
                this.CreatedAt = data.CreatedAt;
            }
            if ("UpdatedAt" in data && data.UpdatedAt != undefined) {
                this.UpdatedAt = data.UpdatedAt;
            }
            if ("PublishedAt" in data && data.PublishedAt != undefined) {
                this.PublishedAt = data.PublishedAt;
            }
            if ("Title" in data && data.Title != undefined) {
                this.Title = data.Title;
            }
            if ("Summary" in data && data.Summary != undefined) {
                this.Summary = data.Summary;
            }
            if ("Content" in data && data.Content != undefined) {
                this.Content = data.Content;
            }
            if ("CoverURL" in data && data.CoverURL != undefined) {
                this.CoverURL = data.CoverURL;
            }
            if ("Prev" in data && data.Prev != undefined) {
                this.Prev = data.Prev;
            }
            if ("Next" in data && data.Next != undefined) {
                this.Next = data.Next;
            }
            if ("AuthorID" in data && data.AuthorID != undefined) {
                this.AuthorID = data.AuthorID;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set ID(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get Slug() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set Slug(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get CreatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
    }
    set CreatedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_CreatedAt() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get UpdatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
    }
    set UpdatedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_UpdatedAt() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get PublishedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
    }
    set PublishedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_PublishedAt() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get Title() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set Title(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get Summary() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set Summary(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get Content() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set Content(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get CoverURL() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set CoverURL(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get Prev() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set Prev(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get Next() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set Next(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get AuthorID() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set AuthorID(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        ID?: string;
        Slug?: string;
        CreatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        UpdatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        PublishedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        Title?: string;
        Summary?: string;
        Content?: string;
        CoverURL?: string;
        Prev?: string;
        Next?: string;
        AuthorID?: string;
    }): SafeBlog {
        const message = new SafeBlog({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.Slug != null) {
            message.Slug = data.Slug;
        }
        if (data.CreatedAt != null) {
            message.CreatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.CreatedAt);
        }
        if (data.UpdatedAt != null) {
            message.UpdatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.UpdatedAt);
        }
        if (data.PublishedAt != null) {
            message.PublishedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.PublishedAt);
        }
        if (data.Title != null) {
            message.Title = data.Title;
        }
        if (data.Summary != null) {
            message.Summary = data.Summary;
        }
        if (data.Content != null) {
            message.Content = data.Content;
        }
        if (data.CoverURL != null) {
            message.CoverURL = data.CoverURL;
        }
        if (data.Prev != null) {
            message.Prev = data.Prev;
        }
        if (data.Next != null) {
            message.Next = data.Next;
        }
        if (data.AuthorID != null) {
            message.AuthorID = data.AuthorID;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: string;
            Slug?: string;
            CreatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            UpdatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            PublishedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            Title?: string;
            Summary?: string;
            Content?: string;
            CoverURL?: string;
            Prev?: string;
            Next?: string;
            AuthorID?: string;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.Slug != null) {
            data.Slug = this.Slug;
        }
        if (this.CreatedAt != null) {
            data.CreatedAt = this.CreatedAt.toObject();
        }
        if (this.UpdatedAt != null) {
            data.UpdatedAt = this.UpdatedAt.toObject();
        }
        if (this.PublishedAt != null) {
            data.PublishedAt = this.PublishedAt.toObject();
        }
        if (this.Title != null) {
            data.Title = this.Title;
        }
        if (this.Summary != null) {
            data.Summary = this.Summary;
        }
        if (this.Content != null) {
            data.Content = this.Content;
        }
        if (this.CoverURL != null) {
            data.CoverURL = this.CoverURL;
        }
        if (this.Prev != null) {
            data.Prev = this.Prev;
        }
        if (this.Next != null) {
            data.Next = this.Next;
        }
        if (this.AuthorID != null) {
            data.AuthorID = this.AuthorID;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID.length)
            writer.writeString(1, this.ID);
        if (this.Slug.length)
            writer.writeString(2, this.Slug);
        if (this.has_CreatedAt)
            writer.writeMessage(3, this.CreatedAt, () => this.CreatedAt.serialize(writer));
        if (this.has_UpdatedAt)
            writer.writeMessage(4, this.UpdatedAt, () => this.UpdatedAt.serialize(writer));
        if (this.has_PublishedAt)
            writer.writeMessage(5, this.PublishedAt, () => this.PublishedAt.serialize(writer));
        if (this.Title.length)
            writer.writeString(6, this.Title);
        if (this.Summary.length)
            writer.writeString(7, this.Summary);
        if (this.Content.length)
            writer.writeString(8, this.Content);
        if (this.CoverURL.length)
            writer.writeString(9, this.CoverURL);
        if (this.Prev.length)
            writer.writeString(10, this.Prev);
        if (this.Next.length)
            writer.writeString(11, this.Next);
        if (this.AuthorID.length)
            writer.writeString(12, this.AuthorID);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeBlog {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SafeBlog();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readString();
                    break;
                case 2:
                    message.Slug = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.CreatedAt, () => message.CreatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.UpdatedAt, () => message.UpdatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.PublishedAt, () => message.PublishedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 6:
                    message.Title = reader.readString();
                    break;
                case 7:
                    message.Summary = reader.readString();
                    break;
                case 8:
                    message.Content = reader.readString();
                    break;
                case 9:
                    message.CoverURL = reader.readString();
                    break;
                case 10:
                    message.Prev = reader.readString();
                    break;
                case 11:
                    message.Next = reader.readString();
                    break;
                case 12:
                    message.AuthorID = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SafeBlog {
        return SafeBlog.deserialize(bytes);
    }
}
export class SafeUser extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: string;
        CreatedAt?: dependency_1.google.protobuf.Timestamp;
        Fullname?: string;
        Username?: string;
        Bio?: string;
        PictureURL?: string;
        WebsiteURL?: string;
        GithubURL?: string;
        LinkedinURL?: string;
        InstagramURL?: string;
        TwitterURL?: string;
        YoutubeURL?: string;
        IsTester?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("CreatedAt" in data && data.CreatedAt != undefined) {
                this.CreatedAt = data.CreatedAt;
            }
            if ("Fullname" in data && data.Fullname != undefined) {
                this.Fullname = data.Fullname;
            }
            if ("Username" in data && data.Username != undefined) {
                this.Username = data.Username;
            }
            if ("Bio" in data && data.Bio != undefined) {
                this.Bio = data.Bio;
            }
            if ("PictureURL" in data && data.PictureURL != undefined) {
                this.PictureURL = data.PictureURL;
            }
            if ("WebsiteURL" in data && data.WebsiteURL != undefined) {
                this.WebsiteURL = data.WebsiteURL;
            }
            if ("GithubURL" in data && data.GithubURL != undefined) {
                this.GithubURL = data.GithubURL;
            }
            if ("LinkedinURL" in data && data.LinkedinURL != undefined) {
                this.LinkedinURL = data.LinkedinURL;
            }
            if ("InstagramURL" in data && data.InstagramURL != undefined) {
                this.InstagramURL = data.InstagramURL;
            }
            if ("TwitterURL" in data && data.TwitterURL != undefined) {
                this.TwitterURL = data.TwitterURL;
            }
            if ("YoutubeURL" in data && data.YoutubeURL != undefined) {
                this.YoutubeURL = data.YoutubeURL;
            }
            if ("IsTester" in data && data.IsTester != undefined) {
                this.IsTester = data.IsTester;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set ID(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get CreatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
    }
    set CreatedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_CreatedAt() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get Fullname() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set Fullname(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get Username() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set Username(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get Bio() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set Bio(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get PictureURL() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set PictureURL(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get WebsiteURL() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set WebsiteURL(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get GithubURL() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set GithubURL(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get LinkedinURL() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set LinkedinURL(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get InstagramURL() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set InstagramURL(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get TwitterURL() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set TwitterURL(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get YoutubeURL() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set YoutubeURL(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get IsTester() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set IsTester(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        ID?: string;
        CreatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        Fullname?: string;
        Username?: string;
        Bio?: string;
        PictureURL?: string;
        WebsiteURL?: string;
        GithubURL?: string;
        LinkedinURL?: string;
        InstagramURL?: string;
        TwitterURL?: string;
        YoutubeURL?: string;
        IsTester?: boolean;
    }): SafeUser {
        const message = new SafeUser({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.CreatedAt != null) {
            message.CreatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.CreatedAt);
        }
        if (data.Fullname != null) {
            message.Fullname = data.Fullname;
        }
        if (data.Username != null) {
            message.Username = data.Username;
        }
        if (data.Bio != null) {
            message.Bio = data.Bio;
        }
        if (data.PictureURL != null) {
            message.PictureURL = data.PictureURL;
        }
        if (data.WebsiteURL != null) {
            message.WebsiteURL = data.WebsiteURL;
        }
        if (data.GithubURL != null) {
            message.GithubURL = data.GithubURL;
        }
        if (data.LinkedinURL != null) {
            message.LinkedinURL = data.LinkedinURL;
        }
        if (data.InstagramURL != null) {
            message.InstagramURL = data.InstagramURL;
        }
        if (data.TwitterURL != null) {
            message.TwitterURL = data.TwitterURL;
        }
        if (data.YoutubeURL != null) {
            message.YoutubeURL = data.YoutubeURL;
        }
        if (data.IsTester != null) {
            message.IsTester = data.IsTester;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: string;
            CreatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            Fullname?: string;
            Username?: string;
            Bio?: string;
            PictureURL?: string;
            WebsiteURL?: string;
            GithubURL?: string;
            LinkedinURL?: string;
            InstagramURL?: string;
            TwitterURL?: string;
            YoutubeURL?: string;
            IsTester?: boolean;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.CreatedAt != null) {
            data.CreatedAt = this.CreatedAt.toObject();
        }
        if (this.Fullname != null) {
            data.Fullname = this.Fullname;
        }
        if (this.Username != null) {
            data.Username = this.Username;
        }
        if (this.Bio != null) {
            data.Bio = this.Bio;
        }
        if (this.PictureURL != null) {
            data.PictureURL = this.PictureURL;
        }
        if (this.WebsiteURL != null) {
            data.WebsiteURL = this.WebsiteURL;
        }
        if (this.GithubURL != null) {
            data.GithubURL = this.GithubURL;
        }
        if (this.LinkedinURL != null) {
            data.LinkedinURL = this.LinkedinURL;
        }
        if (this.InstagramURL != null) {
            data.InstagramURL = this.InstagramURL;
        }
        if (this.TwitterURL != null) {
            data.TwitterURL = this.TwitterURL;
        }
        if (this.YoutubeURL != null) {
            data.YoutubeURL = this.YoutubeURL;
        }
        if (this.IsTester != null) {
            data.IsTester = this.IsTester;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID.length)
            writer.writeString(1, this.ID);
        if (this.has_CreatedAt)
            writer.writeMessage(2, this.CreatedAt, () => this.CreatedAt.serialize(writer));
        if (this.Fullname.length)
            writer.writeString(3, this.Fullname);
        if (this.Username.length)
            writer.writeString(4, this.Username);
        if (this.Bio.length)
            writer.writeString(5, this.Bio);
        if (this.PictureURL.length)
            writer.writeString(6, this.PictureURL);
        if (this.WebsiteURL.length)
            writer.writeString(7, this.WebsiteURL);
        if (this.GithubURL.length)
            writer.writeString(8, this.GithubURL);
        if (this.LinkedinURL.length)
            writer.writeString(9, this.LinkedinURL);
        if (this.InstagramURL.length)
            writer.writeString(10, this.InstagramURL);
        if (this.TwitterURL.length)
            writer.writeString(11, this.TwitterURL);
        if (this.YoutubeURL.length)
            writer.writeString(12, this.YoutubeURL);
        if (this.IsTester != false)
            writer.writeBool(13, this.IsTester);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeUser {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SafeUser();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.CreatedAt, () => message.CreatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.Fullname = reader.readString();
                    break;
                case 4:
                    message.Username = reader.readString();
                    break;
                case 5:
                    message.Bio = reader.readString();
                    break;
                case 6:
                    message.PictureURL = reader.readString();
                    break;
                case 7:
                    message.WebsiteURL = reader.readString();
                    break;
                case 8:
                    message.GithubURL = reader.readString();
                    break;
                case 9:
                    message.LinkedinURL = reader.readString();
                    break;
                case 10:
                    message.InstagramURL = reader.readString();
                    break;
                case 11:
                    message.TwitterURL = reader.readString();
                    break;
                case 12:
                    message.YoutubeURL = reader.readString();
                    break;
                case 13:
                    message.IsTester = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SafeUser {
        return SafeUser.deserialize(bytes);
    }
}
export class SafeBlogAuthor extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: string;
        Slug?: string;
        CreatedAt?: dependency_1.google.protobuf.Timestamp;
        UpdatedAt?: dependency_1.google.protobuf.Timestamp;
        PublishedAt?: dependency_1.google.protobuf.Timestamp;
        Title?: string;
        Summary?: string;
        Content?: string;
        CoverURL?: string;
        Prev?: string;
        Next?: string;
        AuthorID?: string;
        Author?: SafeUser;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("Slug" in data && data.Slug != undefined) {
                this.Slug = data.Slug;
            }
            if ("CreatedAt" in data && data.CreatedAt != undefined) {
                this.CreatedAt = data.CreatedAt;
            }
            if ("UpdatedAt" in data && data.UpdatedAt != undefined) {
                this.UpdatedAt = data.UpdatedAt;
            }
            if ("PublishedAt" in data && data.PublishedAt != undefined) {
                this.PublishedAt = data.PublishedAt;
            }
            if ("Title" in data && data.Title != undefined) {
                this.Title = data.Title;
            }
            if ("Summary" in data && data.Summary != undefined) {
                this.Summary = data.Summary;
            }
            if ("Content" in data && data.Content != undefined) {
                this.Content = data.Content;
            }
            if ("CoverURL" in data && data.CoverURL != undefined) {
                this.CoverURL = data.CoverURL;
            }
            if ("Prev" in data && data.Prev != undefined) {
                this.Prev = data.Prev;
            }
            if ("Next" in data && data.Next != undefined) {
                this.Next = data.Next;
            }
            if ("AuthorID" in data && data.AuthorID != undefined) {
                this.AuthorID = data.AuthorID;
            }
            if ("Author" in data && data.Author != undefined) {
                this.Author = data.Author;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set ID(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get Slug() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set Slug(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get CreatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
    }
    set CreatedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_CreatedAt() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get UpdatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
    }
    set UpdatedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_UpdatedAt() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get PublishedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
    }
    set PublishedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_PublishedAt() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get Title() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set Title(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get Summary() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set Summary(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get Content() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set Content(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get CoverURL() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set CoverURL(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get Prev() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set Prev(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get Next() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set Next(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get AuthorID() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set AuthorID(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get Author() {
        return pb_1.Message.getWrapperField(this, SafeUser, 13) as SafeUser;
    }
    set Author(value: SafeUser) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_Author() {
        return pb_1.Message.getField(this, 13) != null;
    }
    static fromObject(data: {
        ID?: string;
        Slug?: string;
        CreatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        UpdatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        PublishedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        Title?: string;
        Summary?: string;
        Content?: string;
        CoverURL?: string;
        Prev?: string;
        Next?: string;
        AuthorID?: string;
        Author?: ReturnType<typeof SafeUser.prototype.toObject>;
    }): SafeBlogAuthor {
        const message = new SafeBlogAuthor({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.Slug != null) {
            message.Slug = data.Slug;
        }
        if (data.CreatedAt != null) {
            message.CreatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.CreatedAt);
        }
        if (data.UpdatedAt != null) {
            message.UpdatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.UpdatedAt);
        }
        if (data.PublishedAt != null) {
            message.PublishedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.PublishedAt);
        }
        if (data.Title != null) {
            message.Title = data.Title;
        }
        if (data.Summary != null) {
            message.Summary = data.Summary;
        }
        if (data.Content != null) {
            message.Content = data.Content;
        }
        if (data.CoverURL != null) {
            message.CoverURL = data.CoverURL;
        }
        if (data.Prev != null) {
            message.Prev = data.Prev;
        }
        if (data.Next != null) {
            message.Next = data.Next;
        }
        if (data.AuthorID != null) {
            message.AuthorID = data.AuthorID;
        }
        if (data.Author != null) {
            message.Author = SafeUser.fromObject(data.Author);
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: string;
            Slug?: string;
            CreatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            UpdatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            PublishedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            Title?: string;
            Summary?: string;
            Content?: string;
            CoverURL?: string;
            Prev?: string;
            Next?: string;
            AuthorID?: string;
            Author?: ReturnType<typeof SafeUser.prototype.toObject>;
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.Slug != null) {
            data.Slug = this.Slug;
        }
        if (this.CreatedAt != null) {
            data.CreatedAt = this.CreatedAt.toObject();
        }
        if (this.UpdatedAt != null) {
            data.UpdatedAt = this.UpdatedAt.toObject();
        }
        if (this.PublishedAt != null) {
            data.PublishedAt = this.PublishedAt.toObject();
        }
        if (this.Title != null) {
            data.Title = this.Title;
        }
        if (this.Summary != null) {
            data.Summary = this.Summary;
        }
        if (this.Content != null) {
            data.Content = this.Content;
        }
        if (this.CoverURL != null) {
            data.CoverURL = this.CoverURL;
        }
        if (this.Prev != null) {
            data.Prev = this.Prev;
        }
        if (this.Next != null) {
            data.Next = this.Next;
        }
        if (this.AuthorID != null) {
            data.AuthorID = this.AuthorID;
        }
        if (this.Author != null) {
            data.Author = this.Author.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID.length)
            writer.writeString(1, this.ID);
        if (this.Slug.length)
            writer.writeString(2, this.Slug);
        if (this.has_CreatedAt)
            writer.writeMessage(3, this.CreatedAt, () => this.CreatedAt.serialize(writer));
        if (this.has_UpdatedAt)
            writer.writeMessage(4, this.UpdatedAt, () => this.UpdatedAt.serialize(writer));
        if (this.has_PublishedAt)
            writer.writeMessage(5, this.PublishedAt, () => this.PublishedAt.serialize(writer));
        if (this.Title.length)
            writer.writeString(6, this.Title);
        if (this.Summary.length)
            writer.writeString(7, this.Summary);
        if (this.Content.length)
            writer.writeString(8, this.Content);
        if (this.CoverURL.length)
            writer.writeString(9, this.CoverURL);
        if (this.Prev.length)
            writer.writeString(10, this.Prev);
        if (this.Next.length)
            writer.writeString(11, this.Next);
        if (this.AuthorID.length)
            writer.writeString(12, this.AuthorID);
        if (this.has_Author)
            writer.writeMessage(13, this.Author, () => this.Author.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeBlogAuthor {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SafeBlogAuthor();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readString();
                    break;
                case 2:
                    message.Slug = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.CreatedAt, () => message.CreatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.UpdatedAt, () => message.UpdatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.PublishedAt, () => message.PublishedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 6:
                    message.Title = reader.readString();
                    break;
                case 7:
                    message.Summary = reader.readString();
                    break;
                case 8:
                    message.Content = reader.readString();
                    break;
                case 9:
                    message.CoverURL = reader.readString();
                    break;
                case 10:
                    message.Prev = reader.readString();
                    break;
                case 11:
                    message.Next = reader.readString();
                    break;
                case 12:
                    message.AuthorID = reader.readString();
                    break;
                case 13:
                    reader.readMessage(message.Author, () => message.Author = SafeUser.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SafeBlogAuthor {
        return SafeBlogAuthor.deserialize(bytes);
    }
}
